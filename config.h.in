// config.h - Generated from config.h.in by configure.
#pragma once

// Define to the one symbol short name of this package.
#define USTL_NAME	"@pkg_name@"
// Define to the full name and version of this package.
#define USTL_STRING	"@pkg_name@ @pkg_verstr@"
// Define to the version of this package.
#define USTL_VERSION	@pkg_version@
// Define to the address where bug reports for this package should be sent.
#define USTL_BUGREPORT	"@pkg_bugreport@"

/// Define to 1 if you want binary stream operations to throw exceptions
/// on insufficient data or insufficient space. All these errors should
/// be preventable in output code; the input code should verify the
/// data in a separate step. It slows down stream operations a lot.
///
#undef WANT_BSTREAM_EXCEPTIONS

/// gcc has decided that inline is just a suggestion
/// Define to 1 if when you say 'inline' you mean it!
///
/// This is off by default because inline namespaces can not be used with it.
///
#undef WANT_ALWAYS_INLINE

/// Define GNU extensions if unavailable.
#ifndef __GNUC__
    /// GCC (and some other compilers) define '__attribute__'; ustl is using this
    /// macro to alert the compiler to flag inconsistencies in printf/scanf-like
    /// function calls.  Just in case '__attribute__' is undefined, make a dummy.
    /// 
    #ifndef __attribute__
	#define __attribute__(p)
    #endif
#endif
#define WEAKALIAS(sym)	__attribute__((weak,alias(sym)))
#define INLINE		__attribute__((always_inline))
#if __i386__ || __x86_64__
    #define __x86__ 1
#endif

// Define to 1 if your compiler treats char as a separate type along with
// signed char and unsigned char. This will create overloads for char.
#if !defined(sun) && !defined(__sun)
    #define HAVE_THREE_CHAR_TYPES 1
#endif

// Define to byte sizes of types
#define SIZE_OF_CHAR		1
#define SIZE_OF_SHORT		__SIZEOF_SHORT__
#define SIZE_OF_INT		__SIZEOF_INT__
#define SIZE_OF_LONG		__SIZEOF_LONG__
#define SIZE_OF_LONG_LONG	__SIZEOF_LONG_LONG__
#define SIZE_OF_POINTER		__SIZEOF_POINTER__
#define SIZE_OF_SIZE_T		__SIZEOF_SIZE_T__
#define SIZE_OF_BOOL		sizeof(bool)
#if __APPLE__ || (SIZE_OF_SIZE_T == SIZE_OF_LONG && SIZE_OF_SIZE_T != SIZE_OF_INT)
    #define SIZE_T_IS_LONG 1
#endif

// Byte order macros, converted in utypes.h
#define USTL_LITTLE_ENDIAN	__ORDER_LITTLE_ENDIAN__
#define USTL_BIG_ENDIAN		__ORDER_BIG_ENDIAN__
#define USTL_BYTE_ORDER		__BYTE_ORDER__
